confusionMatrix(pred_3, testing$diagnosis)$overall[1]
confusionMatrix(pred_4, testing$diagnosis)$overall[1]
pred_4 <- predict(fit_4, testing)
confusionMatrix(pred_4, testing$diagnosis)$overall[1]
set.seed(3523)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
colnames(training)
set.seed(3523)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
fit_1 <- train(diagnosis ~ ., data = training, method = "rf")
set.seed(233)
fit_1 <- train(CompressiveStrength ~ . , data = training, method = "lasso")
fit_1 <- train(CompressiveStrength ~ . , data = training, method = "lasso")
?plot.enet
plot.enet(fit_1)
library(elasticnet)
plot.enet(fit_1)
plot.enet(training, fit_1)
fit_1
attach(training)
object <- enet(x,y,lambda=1)
object <- enet(training,fit_1,lambda=1)
object <- enet(training[, -1],training[, 1],lambda=1)
ncol(training)
object <- enet(training, training[, 9],lambda=1, trace = TRUE)
object <- enet(training[, -9], training[, 9],lambda=1, trace = TRUE)
fit_1 <- train(CompressiveStrength ~ . , data = training, method = "lasso", print = TRUE)
fit_1 <- train(CompressiveStrength ~ . , data = training, method = "lasso")
fit_1
fit_1$modelInfo
fit_1$metric
fit_1$coefnames
fit_1$xlevels
fit_1$maximize
fit_1$results
object <- enet(training[, 9], 1,lambda=1, trace = TRUE)
object <- enet(training[, 9],y = 1,lambda=1, trace = TRUE)
object <- enet(training[, 9], y = training[, 1],lambda=1, trace = TRUE)
?enet
object <- enet(training[, -9], y = training[, 9], lambda = 1, trace = TRUE)
?train
print(fit_1)
fit_1$finalModel
plot(fit_1$finalModel, xvar="step")
a <- plot(fit_1$finalModel, xvar="step")
?plot.enet
a <- plot(fit_1$finalModel, xvar="penalty")
getwd()
dat = read.csv("./gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
fit_1 <- bats(y = tstrain)
fit_1
str(training)
?bats
a <- predict(fit_1, testing$date)
fit_1 <- bats(y = training)
fit_1 <- bats(y = tstrain)
a <- predict(fit_1, testing$date)
library(dplyr)
library(randomForestSRC)
library(randomForest)
model_time <- system.time(is(model))$elapsed.time
model_time <- system.time(is(testing))$elapsed.time
model_time <- system.time(is(testing))
model_time[3]
library(dplyr)
library(randomForestSRC)
library(caret)
training <- read.csv("./pml-training.csv")
training <- read.csv("./pml-training.csv")
testing <- read.csv("./pml-testing.csv")
training <- training[,-c(1:7)]
testing <- testing[, -c(1:7)]
col_all_NA <- which(sapply(testing, FUN = function(x) all(is.na(x))))
n_col <- length(col_all_NA)
testing <- testing[, -col_all_NA]
training <- training[, -col_all_NA]
ncol(training)
ncol(testing)
inTrain = createDataPartition(training$classe, p = 3/4)[[1]]
validation = training[-inTrain,]
training = training[ inTrain,]
model <- rfsrc(classe ~ ., data = training)
val_result <- predict.rfsrc(model, validation)
confusionMatrix(val_result, validation$classe)
val_result
val_result$err.rate
val_result$predicted
val_result
View(training)
library(dplyr)
library(randomForestSRC)
library(caret)
training <- read.csv("./pml-training.csv")
View(training)
View(model)
confint(model)
a <- predict(model, newdata = testing)
a <- predict(model, newdata = validation)
confusionMatrix(a, validation$classe)
head(a)
head(validation$classe)
confusionMatrix(a$yvar, validation$classe)
nearZeroVar(training)
names(trainging)[nearZeroVar(training)]
names(training)[nearZeroVar(training)]
ncol(training)
install.packages("corrplot")
library(dplyr)
library(randomForestSRC)
library(caret)
library(corrplot)
set.seed(1107)
low_val <- nearZeroVar(training)
low_val <- nearZeroVar(training)
names(training)[low_val]
library(shiny)
library(miniUI)
pickXY <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X",
xlab = "X", ylab = "Y")
})
observeEvent(input$done, {
stopApp(brushedPoints(data_frame, input$brush,
xvar = "X", yvar = "Y"))
})
}
runGadget(ui, server)
}
my_data <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(my_data)
getwd()
setwd("D:/R/GitHub/Kazalniki_kakovosti")
data <- read.csv("Vprasanja_v_csv.csv")
data <- readLines("Vprasanja_v_csv.csv")
head(data)
library(dplyr)
library(stringr)
data <- data[str_which(data, "^[[")]
data <- data[str_which(data, "^/[")]
data <- data[str_which(data, "^\\[")]
izbire <- data[str_which(data, "^\\[")]
data <- readLines("Vprasanja_v_csv.csv")
podrocja <- data[str_which(data, "^\\[?\\]")]
head(data)
podrocja <- data[str_which(data, "^\\{?\\}")]
podrocja <- data[str_which(data, "^\\{??\\}")]
podrocja <- data[str_which(data, "*\\{??\\}")]
podrocja <- data[str_which(data, "\\{??\\}")]
podrocja <- data[str_which(data, "\\{##\\}")]
podrocja <- data[str_which(data, "\\{?\\}")]
podrocja <- data[str_which(data, "\\{?{2}\\}")]
podrocja <- data[str_which(data, "\\{*{2}\\}")]
podrocja <- data[str_which(data, "\\{[[:digit:]]{2}\\}")]
kazalnik <- data[str_which(data, "^\\[[[:digit]]{2}-[[:digit:]]{2}\\}")]
kazalnik <- data[str_which(data, "^\\{[[:digit]]{2}-[[:digit:]]{2}\\}")]
kazalnik <- data[str_which(data, "\\{[[:digit]]{2}-[[:digit:]]{2}\\}")]
kazalnik <- data[str_which(data, "\\{[[:digit:]]{2}-[[:digit:]]{2}\\}")]
kazalnik <- data[str_which(data, "^\\{[[:digit:]]{2}-[[:digit:]]{2}\\}")]
podrocja <- data[str_which(data, "^\\{[[:digit:]]{2}\\}")]
nrow(kazalnik)
length(kazalnik)
matrix(nrow = 113, ncol = 5)
tabela_izbir <- matrix(nrow = 113, ncol = 5)
tabela_izbir <- data.frame(tabela_izbir)
colnames(tabela_izbir) <- c("0 - Nezadostno", "1 - Pomanjkljivo", "2 - Delno", "3 - Zadovoljivo", "4 - Vzorno")
head(tabela_izbir)
str_extract(izbire[1], 3)
str_sub(izbire[1], 3,3)
str_sub(izbire[1], 3,4)
str_sub(izbire[1], 2,3)
str_sub(izbire[1], 2)
str_sub(izbire[1], 3,3)
as.numeric(str_sub(izbire[1], 3,3)) < as.numeric(str_sub(izbire[2], 3,3))
for(i in izbire) {
if(i == 1) {
tabela_izbir[vrstica, str_sub(izbire[i], 3,3) + 1] <- izbire[i]
}
else(as.numeric(str_sub(izbire[i], 3,3)) < as.numeric(str_sub(izbire[i-1], 3,3)) == TRUE) {
vrstica <- vrstica + 1
tabela_izbir[vrstica, str_sub(izbire[i], 3,3) + 1] <- izbire[i]
}
else {
tabela_izbir[vrstica, str_sub(izbire[i], 3,3) + 1] <- izbire[i]
}
}
vrstica <- 1
for(i in izbire) {
if(i == 1) {
tabela_izbir[vrstica, str_sub(izbire[i], 3,3) + 1] <- izbire[i]
}
else(as.numeric(str_sub(izbire[i], 3,3)) < as.numeric(str_sub(izbire[i-1], 3,3))) {
vrstica <- vrstica + 1
tabela_izbir[vrstica, str_sub(izbire[i], 3,3) + 1] <- izbire[i]
}
else {
tabela_izbir[vrstica, str_sub(izbire[i], 3,3) + 1] <- izbire[i]
}
}
for(i in c(1:length(izbire)) {
for(i in c(1:length(izbire))) {
if(i == 1) {
tabela_izbir[vrstica, str_sub(izbire[i], 3,3) + 1] <- izbire[i]
}
else(as.numeric(str_sub(izbire[i], 3,3)) < as.numeric(str_sub(izbire[i-1], 3,3))) {
vrstica <- vrstica + 1
tabela_izbir[vrstica, str_sub(izbire[i], 3,3) + 1] <- izbire[i]
}
else {
tabela_izbir[vrstica, str_sub(izbire[i], 3,3) + 1] <- izbire[i]
}
}
for(i in c(1:length(izbire))) {
if(i == 1) {
tabela_izbir[vrstica, str_sub(izbire[i], 3,3) + 1] <- izbire[i]
}
else if(as.numeric(str_sub(izbire[i], 3,3)) < as.numeric(str_sub(izbire[i-1], 3,3))) {
vrstica <- vrstica + 1
tabela_izbir[vrstica, str_sub(izbire[i], 3,3) + 1] <- izbire[i]
}
else {
tabela_izbir[vrstica, str_sub(izbire[i], 3,3) + 1] <- izbire[i]
}
}
for(i in c(1:length(izbire))) {
if(i == 1) {
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
else if(as.numeric(str_sub(izbire[i], 3, 3)) < as.numeric(str_sub(izbire[i-1], 3, 3))) {
vrstica <- vrstica + 1
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
else {
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
}
head(tabela_izbir)
View(tabela_izbir)
vrstica <- 1
for(i in c(1:length(izbire))) {
if(i == 1) {
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
else if(as.numeric(str_sub(izbire[i], 3, 3)) < as.numeric(str_sub(izbire[i-1], 3, 3))) {
vrstica <- vrstica + 1
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
else {
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
}
View(tabela_izbir)
tabela_izbir <- matrix(nrow = 113, ncol = 5)
tabela_izbir <- data.frame(tabela_izbir)
colnames(tabela_izbir) <- c("0 - Nezadostno", "1 - Pomanjkljivo", "2 - Delno", "3 - Zadovoljivo", "4 - Vzorno")
vrstica <- 1
for(i in c(1:length(izbire))) {
if(i == 1) {
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
else if(as.numeric(str_sub(izbire[i], 3, 3)) < as.numeric(str_sub(izbire[i-1], 3, 3))) {
vrstica <- vrstica + 1
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
else {
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
}
View(tabela_izbir)
podrocja <- data[str_which(data, "^\\{[[:digit:]]{2}\\}")]
kazalnik <- data[str_which(data, "^\\{[[:digit:]]{2}-[[:digit:]]{2}\\}")]
izbire <- data[str_which(data, "^\\[")]
tabela_izbir <- matrix(nrow = length(kazalnik), ncol = 5)
tabela_izbir <- data.frame(tabela_izbir)
colnames(tabela_izbir) <- c("0 - Nezadostno", "1 - Pomanjkljivo", "2 - Delno", "3 - Zadovoljivo", "4 - Vzorno")
vrstica <- 1
for(i in c(1:length(izbire))) {
if(i == 1) {
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
else if(as.numeric(str_sub(izbire[i], 3, 3)) < as.numeric(str_sub(izbire[i-1], 3, 3))) {
vrstica <- vrstica + 1
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
else {
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
}
View(tabela_izbir)
setwd("D:/R/GitHub/Kazalniki_kakovosti")
data <- readLines("Vprasanja_v_csv.csv")
head(data, 30)
podrocja <- data[str_which(data, "^\\{[[:digit:]]{2}\\}")]
kazalnik <- data[str_which(data, "^\\{[[:digit:]]{2}-[[:digit:]]{2}\\}")]
izbire <- data[str_which(data, "^\\[")]
tabela_izbir <- matrix(nrow = length(kazalnik), ncol = 5)
tabela_izbir <- data.frame(tabela_izbir)
colnames(tabela_izbir) <- c("0 - Nezadostno", "1 - Pomanjkljivo", "2 - Delno", "3 - Zadovoljivo", "4 - Vzorno")
vrstica <- 1
for(i in c(1:length(izbire))) {
if(i == 1) {
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
else if(as.numeric(str_sub(izbire[i], 3, 3)) < as.numeric(str_sub(izbire[i-1], 3, 3))) {
vrstica <- vrstica + 1
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
else {
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
}
tabela_izbir <- matrix(nrow = length(kazalnik), ncol = 5)
tabela_izbir <- data.frame(tabela_izbir)
colnames(tabela_izbir) <- c("0 - Nezadostno", "1 - Pomanjkljivo", "2 - Delno", "3 - Zadovoljivo", "4 - Vzorno")
View(tabela_izbir)
vrstica <- 1
for(i in c(1:length(izbire))) {
if(i == 1) {
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
else if(as.numeric(str_sub(izbire[i], 3, 3)) < as.numeric(str_sub(izbire[i-1], 3, 3))) {
vrstica <- vrstica + 1
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
else {
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
}
koncna_tabela <- data.frame()
colnames(koncna_tabela) <- colnames(tabela_izbir)
koncna_tabela <- data.frame(matrix(nrow = 1, ncol = 5))
koncna_tabela <- bind_rows(kazalnik, setNames(tabela_izbir, names(kazalnik)))
koncna_tabela <- bind_rows(kazalnik, tabela_izbir)
koncna_tabela <- bind_rows(setNames(kazalnik, names(tabela_izbir)[1]), tabela_izbir)
View(koncna_tabela)
kazalnik <- data.frame(matrix(kazalnik, nrow = length(kazalnik), ncol = 1)
kazalnik <- data.frame(matrix(kazalnik, nrow = length(kazalnik), ncol = 1))
koncna_tabela <- data.frame(matrix(nrow = 1, ncol = 5))
colnames(koncna_tabela) <- colnames(tabela_izbir)
koncna_tabela <- bind_rows(setNames(kazalnik, names(tabela_izbir)[1]), tabela_izbir)
View(koncna_tabela)
kazalnik <- data.frame(matrix(kazalnik, nrow = length(kazalnik), ncol = 1))
koncna_tabela <- data.frame(matrix(nrow = 1, ncol = 5))
colnames(koncna_tabela) <- colnames(tabela_izbir)
for (i in c(1:nrow(kazalnik))) {
koncna_tabela <- rbind_all(koncna_tabela, kazalnik[i, ], tabela_izbir[i, ])
}
for (i in c(1:nrow(kazalnik))) {
koncna_tabela <- rbind(koncna_tabela, kazalnik[i, ])
koncna_tabela <- rbind(koncna_tabela, tabela_izbir[i, ])
}
kazalnik <- data[str_which(data, "^\\{[[:digit:]]{2}-[[:digit:]]{2}\\}")]
kazalnik <- data.frame(matrix(kazalnik, nrow = length(kazalnik), ncol = 1))
for (i in c(1:nrow(kazalnik))) {
koncna_tabela <- rbind(koncna_tabela, kazalnik[i, ])
koncna_tabela <- rbind(koncna_tabela, tabela_izbir[i, ])
}
View(koncna_tabela)
koncna_tabela <- data.frame(matrix(nrow = 1, ncol = 5))
koncna_tabela <- rbind(koncna_tabela, kazalnik[1, ])
View(koncna_tabela)
koncna_tabela <- rbind(koncna_tabela, kazalnik[1, 1])
View(koncna_tabela)
View(kazalnik)
kazalnik[1,1]
koncna_tabela <- rbind_all(koncna_tabela, kazalnik[1, 1])
koncna_tabela <- bind_rows(koncna_tabela, kazalnik[1, 1])
koncna_tabela <- bind_rows(koncna_tabela$X1, kazalnik[1, 1])
koncna_tabela <- bind_rows(koncna_tabela$X1, kazalnik$matrix.kazalnik..nrow...length.kazalnik...ncol...1.)
colnames(kazalnik) <- "kazalnik"
koncna_tabela <- data.frame(matrix(nrow = 1, ncol = 5))
colnames(koncna_tabela) <- colnames(tabela_izbir)
for (i in c(1:nrow(kazalnik))) {
koncna_tabela <- rbind(koncna_tabela, kazalnik[i, ])
koncna_tabela <- rbind(koncna_tabela, tabela_izbir[i, ])
}
View(koncna_tabela)
koncna_tabela <- data.frame(matrix(nrow = 1, ncol = 5))
colnames(koncna_tabela) <- colnames(tabela_izbir)
for (i in c(1:nrow(kazalnik))) {
koncna_tabela <- rbind(koncna_tabela, kazalnik[i, kazalnik])
koncna_tabela <- rbind(koncna_tabela, tabela_izbir[i, ])
}
for (i in c(1:nrow(kazalnik))) {
koncna_tabela <- rbind(koncna_tabela, kazalnik[i, 2])
koncna_tabela <- rbind(koncna_tabela, tabela_izbir[i, ])
}
View(koncna_tabela)
koncna_tabela <- data.frame(matrix(nrow = 1, ncol = 5))
colnames(koncna_tabela) <- colnames(tabela_izbir)
for (i in c(1:nrow(kazalnik))) {
koncna_tabela <- rbind(koncna_tabela, kazalnik[i, 1])
koncna_tabela <- rbind(koncna_tabela, tabela_izbir[i, ])
}
View(koncna_tabela)
for (i in c(1:2*nrow(kazalnik))) {
if((i %% 2) != 0) {
koncna_tabela[i, 1] <- kazalnik[i:2+1, 1]
}
else koncna_tabela[i, ] <- tabela_izbir[i:2, ]
}
koncna_tabela <- data.frame(matrix(nrow = nrow(kazalnik), ncol = 5))
colnames(koncna_tabela) <- colnames(tabela_izbir)
for (i in c(1:2*nrow(kazalnik))) {
if((i %% 2) != 0) {
koncna_tabela[i, 1] <- kazalnik[i:2+1, 1]
}
else koncna_tabela[i, ] <- tabela_izbir[i:2, ]
}
koncna_tabela <- data.frame(matrix(nrow = 2*nrow(kazalnik), ncol = 5))
colnames(koncna_tabela) <- colnames(tabela_izbir)
for (i in c(1:2*nrow(kazalnik))) {
if((i %% 2) != 0) {
koncna_tabela[i, 1] <- kazalnik[i:2+1, 1]
}
else koncna_tabela[i, ] <- tabela_izbir[i:2, ]
}
for (i in c(1:2*nrow(kazalnik))) {
if((i %% 2) != 0) {
koncna_tabela[i, 1] <- kazalnik[(i:2+1), 1]
}
else koncna_tabela[i, ] <- tabela_izbir[i:2, ]
}
kazalnik <- data.frame(matrix(nrow = length(kazalnik), ncol = 5))
colnames(kazalnik) <- "kazalnik"
tabela_kazalnikov <- data.frame(matrix(nrow = length(kazalnik), ncol = 5))
kazalnik <- data[str_which(data, "^\\{[[:digit:]]{2}-[[:digit:]]{2}\\}")]
colnames(kazalnik) <- "kazalnik"
colnames(tabela_kazalnikov) <- "kazalnik"
tabela_kazalnikov[,1] <- kazalnik
tabela_kazalnikov <- data.frame(matrix(nrow = length(kazalnik), ncol = 5))
colnames(tabela_kazalnikov) <- "kazalnik"
tabela_kazalnikov[,1] <- kazalnik
koncna_tabela <- rbind(koncna_tabela, tabela_izbir[i,])
koncna_tabela <- data.frame(matrix(nrow = 2*nrow(kazalnik), ncol = 5))
colnames(koncna_tabela) <- colnames(tabela_izbir)
koncna_tabela <- data.frame(matrix(nrow = 1, ncol = 5))
colnames(koncna_tabela) <- colnames(tabela_izbir)
for (i in c(1:nrow(kazalnik))) {
koncna_tabela <- rbind(koncna_tabela, tabela_kazalnikov[i,])
koncna_tabela <- rbind(koncna_tabela, tabela_izbir[i,])
}
for (i in c(1:nrow(tabela_kazalnikov))) {
koncna_tabela <- rbind(koncna_tabela, tabela_kazalnikov[i,])
koncna_tabela <- rbind(koncna_tabela, tabela_izbir[i,])
}
colnames(tabela_kazalnikov) <- colnames(tabela_izbir)
for (i in c(1:nrow(tabela_kazalnikov))) {
koncna_tabela <- rbind(koncna_tabela, tabela_kazalnikov[i,])
koncna_tabela <- rbind(koncna_tabela, tabela_izbir[i,])
}
View(koncna_tabela)
koncna_tabela <- koncna_tabela[-1, ]
write.csv(koncna_tabela, "koncna_tabela.csv")
write.csv(koncna_tabela, "koncna_tabela.csv", na = "")
write.csv(koncna_tabela, "koncna_tabela.csv", na = "", row.names = FALSE)
tabela_izbir$kazalnik <- kazalnik
write.csv(tabela_izbir, "koncna_tabela.csv", na = "", row.names = FALSE)
View(tabela_izbir)
tabela_izbir <- bind_cols(tabela_izbir[kazalnik], tabela_izbir[, 1:5])
tabela_izbir <- bind_cols(tabela_izbir[, 6], tabela_izbir[, 1:5])
View(tabela_izbir)
data <- readLines("Vprasanja_v_csv.csv")
podrocja <- data[str_which(data, "^\\{[[:digit:]]{2}\\}")]
kazalnik <- data[str_which(data, "^\\{[[:digit:]]{2}-[[:digit:]]{2}\\}")]
izbire <- data[str_which(data, "^\\[")]
tabela_izbir <- matrix(nrow = length(kazalnik), ncol = 5)
tabela_izbir <- data.frame(tabela_izbir)
colnames(tabela_izbir) <- c("0 - Nezadostno", "1 - Pomanjkljivo", "2 - Delno", "3 - Zadovoljivo", "4 - Vzorno")
vrstica <- 1
for(i in c(1:length(izbire))) {
if(i == 1) {
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
else if(as.numeric(str_sub(izbire[i], 3, 3)) < as.numeric(str_sub(izbire[i-1], 3, 3))) {
vrstica <- vrstica + 1
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
else {
tabela_izbir[vrstica, as.numeric(str_sub(izbire[i], 3,3)) + 1] <- izbire[i]
}
}
tabela_izbir$kazalnik <- kazalnik
write.csv(tabela_izbir, "koncna_tabela.csv", na = "", row.names = FALSE)
